// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// source: hero.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Observable } from "rxjs";
import { map } from "rxjs/operators";
import { Foo } from "./some-file";

export const protobufPackage = "hero";

export interface HeroById {
  id: number;
}

export interface VillainById {
  id: number;
}

export interface Hero {
  id: number;
  name: string;
}

export interface Villain {
  id: number;
  name: string;
}

function createBaseHeroById(): HeroById {
  return { id: 0 };
}

export const HeroById: MessageFns<HeroById> = {
  encode(message: HeroById, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HeroById {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHeroById();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HeroById {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: HeroById): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HeroById>, I>>(base?: I): HeroById {
    return HeroById.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HeroById>, I>>(object: I): HeroById {
    const message = createBaseHeroById();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseVillainById(): VillainById {
  return { id: 0 };
}

export const VillainById: MessageFns<VillainById> = {
  encode(message: VillainById, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VillainById {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVillainById();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VillainById {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: VillainById): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VillainById>, I>>(base?: I): VillainById {
    return VillainById.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VillainById>, I>>(object: I): VillainById {
    const message = createBaseVillainById();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseHero(): Hero {
  return { id: 0, name: "" };
}

export const Hero: MessageFns<Hero> = {
  encode(message: Hero, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Hero {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHero();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Hero {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: Hero): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Hero>, I>>(base?: I): Hero {
    return Hero.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Hero>, I>>(object: I): Hero {
    const message = createBaseHero();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseVillain(): Villain {
  return { id: 0, name: "" };
}

export const Villain: MessageFns<Villain> = {
  encode(message: Villain, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Villain {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVillain();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Villain {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: Villain): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Villain>, I>>(base?: I): Villain {
    return Villain.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Villain>, I>>(object: I): Villain {
    const message = createBaseVillain();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    return message;
  },
};

export interface HeroService {
  FindOneHero(request: HeroById, metadata?: Foo): Promise<Hero>;
  FindOneVillain(request: VillainById, metadata?: Foo): Promise<Villain>;
  FindManyVillain(request: Observable<VillainById>, metadata?: Foo): Observable<Villain>;
}

export const HeroServiceServiceName = "hero.HeroService";
export class HeroServiceClientImpl implements HeroService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || HeroServiceServiceName;
    this.rpc = rpc;
    this.FindOneHero = this.FindOneHero.bind(this);
    this.FindOneVillain = this.FindOneVillain.bind(this);
    this.FindManyVillain = this.FindManyVillain.bind(this);
  }
  FindOneHero(request: HeroById, metadata?: Foo): Promise<Hero> {
    const data = HeroById.encode(request).finish();
    const promise = this.rpc.request(this.service, "FindOneHero", data);
    return promise.then((data) => Hero.decode(new BinaryReader(data)));
  }

  FindOneVillain(request: VillainById, metadata?: Foo): Promise<Villain> {
    const data = VillainById.encode(request).finish();
    const promise = this.rpc.request(this.service, "FindOneVillain", data);
    return promise.then((data) => Villain.decode(new BinaryReader(data)));
  }

  FindManyVillain(request: Observable<VillainById>, metadata?: Foo): Observable<Villain> {
    const data = request.pipe(map((request) => VillainById.encode(request).finish()));
    const result = this.rpc.bidirectionalStreamingRequest(this.service, "FindManyVillain", data);
    return result.pipe(map((data) => Villain.decode(new BinaryReader(data))));
  }
}

export type HeroServiceDefinition = typeof HeroServiceDefinition;
export const HeroServiceDefinition = {
  name: "HeroService",
  fullName: "hero.HeroService",
  methods: {
    findOneHero: {
      name: "FindOneHero",
      requestType: HeroById,
      requestStream: false,
      responseType: Hero,
      responseStream: false,
      options: {},
    },
    findOneVillain: {
      name: "FindOneVillain",
      requestType: VillainById,
      requestStream: false,
      responseType: Villain,
      responseStream: false,
      options: {},
    },
    findManyVillain: {
      name: "FindManyVillain",
      requestType: VillainById,
      requestStream: true,
      responseType: Villain,
      responseStream: true,
      options: {},
    },
  },
} as const;

interface Rpc {
  request(service: string, method: string, data: Uint8Array, metadata?: Foo): Promise<Uint8Array>;
  clientStreamingRequest(
    service: string,
    method: string,
    data: Observable<Uint8Array>,
    metadata?: Foo,
  ): Promise<Uint8Array>;
  serverStreamingRequest(service: string, method: string, data: Uint8Array, metadata?: Foo): Observable<Uint8Array>;
  bidirectionalStreamingRequest(
    service: string,
    method: string,
    data: Observable<Uint8Array>,
    metadata?: Foo,
  ): Observable<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
