// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// source: file.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "";

export interface Baz {
  foo?: FooBar | undefined;
}

export interface FooBar {
}

function createBaseBaz(): Baz {
  return { foo: undefined };
}

export const Baz: MessageFns<Baz> = {
  encode(message: Baz, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.foo !== undefined) {
      FooBar.encode(message.foo, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Baz {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBaz();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.foo = FooBar.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Baz {
    return { foo: isSet(object.foo) ? FooBar.fromJSON(object.foo) : undefined };
  },

  toJSON(message: Baz): unknown {
    const obj: any = {};
    if (message.foo !== undefined) {
      obj.foo = FooBar.toJSON(message.foo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Baz>, I>>(base?: I): Baz {
    return Baz.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Baz>, I>>(object: I): Baz {
    const message = createBaseBaz();
    message.foo = (object.foo !== undefined && object.foo !== null) ? FooBar.fromPartial(object.foo) : undefined;
    return message;
  },
};

function createBaseFooBar(): FooBar {
  return {};
}

export const FooBar: MessageFns<FooBar> = {
  encode(_: FooBar, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FooBar {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFooBar();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FooBar {
    return {};
  },

  toJSON(_: FooBar): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<FooBar>, I>>(base?: I): FooBar {
    return FooBar.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FooBar>, I>>(_: I): FooBar {
    const message = createBaseFooBar();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
