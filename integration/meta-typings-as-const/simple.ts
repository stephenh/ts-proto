// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// source: simple.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { FileDescriptorProto as FileDescriptorProto1 } from "ts-proto-descriptors";
import { protoMetadata as protoMetadata1 } from "./google/protobuf/descriptor";

export const protobufPackage = "simple";

export enum TestEnum {
  VALUE_A = 0,
  VALUE_B = 1,
  UNRECOGNIZED = -1,
}

/** Test doc comment */
export interface Test {
  enum: TestEnum;
}

function createBaseTest(): Test {
  return { enum: 0 };
}

export const Test: MessageFns<Test> = {
  encode(message: Test, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enum !== 0) {
      writer.uint32(8).int32(message.enum);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Test {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.enum = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

type ProtoMetaMessageOptions = {
  options?: { [key: string]: any };
  fields?: { [key: string]: { [key: string]: any } };
  oneof?: { [key: string]: { [key: string]: any } };
  nested?: { [key: string]: ProtoMetaMessageOptions };
};

export interface ProtoMetadata {
  fileDescriptor: FileDescriptorProto1;
  references: { [key: string]: any };
  dependencies?: ProtoMetadata[];
  options?: {
    options?: { [key: string]: any };
    services?: {
      [key: string]: { options?: { [key: string]: any }; methods?: { [key: string]: { [key: string]: any } } };
    };
    messages?: { [key: string]: ProtoMetaMessageOptions };
    enums?: { [key: string]: { options?: { [key: string]: any }; values?: { [key: string]: { [key: string]: any } } } };
  };
}

export const protoMetadata = {
  fileDescriptor: {
    "name": "simple.proto",
    "package": "simple",
    "dependency": ["google/protobuf/descriptor.proto"],
    "publicDependency": [],
    "weakDependency": [],
    "messageType": [{
      "name": "Test",
      "field": [{
        "name": "enum",
        "number": 1,
        "label": 1,
        "type": 14,
        "typeName": ".simple.TestEnum",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "enum",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }],
    "enumType": [{
      "name": "TestEnum",
      "value": [{ "name": "VALUE_A", "number": 0, "options": { "deprecated": false, "uninterpretedOption": [] } }, {
        "name": "VALUE_B",
        "number": 1,
        "options": { "deprecated": false, "uninterpretedOption": [] },
      }],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }],
    "service": [],
    "extension": [{
      "name": "string_value",
      "number": 1234,
      "label": 1,
      "type": 9,
      "typeName": "",
      "extendee": ".google.protobuf.EnumValueOptions",
      "defaultValue": "",
      "oneofIndex": 0,
      "jsonName": "stringValue",
      "options": undefined,
      "proto3Optional": false,
    }],
    "options": undefined,
    "sourceCodeInfo": {
      "location": [{
        "path": [4, 0],
        "span": [10, 0, 12, 1],
        "leadingComments": " Test doc comment\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }],
    },
    "syntax": "proto3",
  },
  references: { ".simple.TestEnum": TestEnum, ".simple.Test": Test },
  dependencies: [protoMetadata1],
  options: {
    enums: { "TestEnum": { values: { "VALUE_A": { "string_value": "A" }, "VALUE_B": { "string_value": "B" } } } },
  },
} as const satisfies ProtoMetadata;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
