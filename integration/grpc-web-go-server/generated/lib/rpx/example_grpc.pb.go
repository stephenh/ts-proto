// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpx

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DashStateClient is the client API for DashState service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DashStateClient interface {
	UserSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DashUserSettingsState, error)
	ActiveUserSettingsStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (DashState_ActiveUserSettingsStreamClient, error)
}

type dashStateClient struct {
	cc grpc.ClientConnInterface
}

func NewDashStateClient(cc grpc.ClientConnInterface) DashStateClient {
	return &dashStateClient{cc}
}

func (c *dashStateClient) UserSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DashUserSettingsState, error) {
	out := new(DashUserSettingsState)
	err := c.cc.Invoke(ctx, "/rpx.DashState/UserSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashStateClient) ActiveUserSettingsStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (DashState_ActiveUserSettingsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DashState_serviceDesc.Streams[0], "/rpx.DashState/ActiveUserSettingsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &dashStateActiveUserSettingsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DashState_ActiveUserSettingsStreamClient interface {
	Recv() (*DashUserSettingsState, error)
	grpc.ClientStream
}

type dashStateActiveUserSettingsStreamClient struct {
	grpc.ClientStream
}

func (x *dashStateActiveUserSettingsStreamClient) Recv() (*DashUserSettingsState, error) {
	m := new(DashUserSettingsState)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DashStateServer is the server API for DashState service.
// All implementations should embed UnimplementedDashStateServer
// for forward compatibility
type DashStateServer interface {
	UserSettings(context.Context, *Empty) (*DashUserSettingsState, error)
	ActiveUserSettingsStream(*Empty, DashState_ActiveUserSettingsStreamServer) error
}

// UnimplementedDashStateServer should be embedded to have forward compatible implementations.
type UnimplementedDashStateServer struct {
}

func (UnimplementedDashStateServer) UserSettings(context.Context, *Empty) (*DashUserSettingsState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSettings not implemented")
}
func (UnimplementedDashStateServer) ActiveUserSettingsStream(*Empty, DashState_ActiveUserSettingsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ActiveUserSettingsStream not implemented")
}

// UnsafeDashStateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DashStateServer will
// result in compilation errors.
type UnsafeDashStateServer interface {
	mustEmbedUnimplementedDashStateServer()
}

func RegisterDashStateServer(s grpc.ServiceRegistrar, srv DashStateServer) {
	s.RegisterService(&_DashState_serviceDesc, srv)
}

func _DashState_UserSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashStateServer).UserSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpx.DashState/UserSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashStateServer).UserSettings(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashState_ActiveUserSettingsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DashStateServer).ActiveUserSettingsStream(m, &dashStateActiveUserSettingsStreamServer{stream})
}

type DashState_ActiveUserSettingsStreamServer interface {
	Send(*DashUserSettingsState) error
	grpc.ServerStream
}

type dashStateActiveUserSettingsStreamServer struct {
	grpc.ServerStream
}

func (x *dashStateActiveUserSettingsStreamServer) Send(m *DashUserSettingsState) error {
	return x.ServerStream.SendMsg(m)
}

var _DashState_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpx.DashState",
	HandlerType: (*DashStateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserSettings",
			Handler:    _DashState_UserSettings_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ActiveUserSettingsStream",
			Handler:       _DashState_ActiveUserSettingsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "example.proto",
}

// DashAPICredsClient is the client API for DashAPICreds service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DashAPICredsClient interface {
	Create(ctx context.Context, in *DashAPICredsCreateReq, opts ...grpc.CallOption) (*DashCred, error)
	Update(ctx context.Context, in *DashAPICredsUpdateReq, opts ...grpc.CallOption) (*DashCred, error)
	Delete(ctx context.Context, in *DashAPICredsDeleteReq, opts ...grpc.CallOption) (*DashCred, error)
}

type dashAPICredsClient struct {
	cc grpc.ClientConnInterface
}

func NewDashAPICredsClient(cc grpc.ClientConnInterface) DashAPICredsClient {
	return &dashAPICredsClient{cc}
}

func (c *dashAPICredsClient) Create(ctx context.Context, in *DashAPICredsCreateReq, opts ...grpc.CallOption) (*DashCred, error) {
	out := new(DashCred)
	err := c.cc.Invoke(ctx, "/rpx.DashAPICreds/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashAPICredsClient) Update(ctx context.Context, in *DashAPICredsUpdateReq, opts ...grpc.CallOption) (*DashCred, error) {
	out := new(DashCred)
	err := c.cc.Invoke(ctx, "/rpx.DashAPICreds/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashAPICredsClient) Delete(ctx context.Context, in *DashAPICredsDeleteReq, opts ...grpc.CallOption) (*DashCred, error) {
	out := new(DashCred)
	err := c.cc.Invoke(ctx, "/rpx.DashAPICreds/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DashAPICredsServer is the server API for DashAPICreds service.
// All implementations should embed UnimplementedDashAPICredsServer
// for forward compatibility
type DashAPICredsServer interface {
	Create(context.Context, *DashAPICredsCreateReq) (*DashCred, error)
	Update(context.Context, *DashAPICredsUpdateReq) (*DashCred, error)
	Delete(context.Context, *DashAPICredsDeleteReq) (*DashCred, error)
}

// UnimplementedDashAPICredsServer should be embedded to have forward compatible implementations.
type UnimplementedDashAPICredsServer struct {
}

func (UnimplementedDashAPICredsServer) Create(context.Context, *DashAPICredsCreateReq) (*DashCred, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDashAPICredsServer) Update(context.Context, *DashAPICredsUpdateReq) (*DashCred, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDashAPICredsServer) Delete(context.Context, *DashAPICredsDeleteReq) (*DashCred, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeDashAPICredsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DashAPICredsServer will
// result in compilation errors.
type UnsafeDashAPICredsServer interface {
	mustEmbedUnimplementedDashAPICredsServer()
}

func RegisterDashAPICredsServer(s grpc.ServiceRegistrar, srv DashAPICredsServer) {
	s.RegisterService(&_DashAPICreds_serviceDesc, srv)
}

func _DashAPICreds_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashAPICredsCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashAPICredsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpx.DashAPICreds/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashAPICredsServer).Create(ctx, req.(*DashAPICredsCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashAPICreds_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashAPICredsUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashAPICredsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpx.DashAPICreds/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashAPICredsServer).Update(ctx, req.(*DashAPICredsUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashAPICreds_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashAPICredsDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashAPICredsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpx.DashAPICreds/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashAPICredsServer).Delete(ctx, req.(*DashAPICredsDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DashAPICreds_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpx.DashAPICreds",
	HandlerType: (*DashAPICredsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _DashAPICreds_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DashAPICreds_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DashAPICreds_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example.proto",
}
