// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// source: proto-3.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "omit";

export interface Proto3TestMessage {
  boolValue?: boolean | null;
  intValue?: number | null;
  stringValue?: string | null;
  optionalBoolValue?: boolean | null | undefined;
  optionalIntValue?: number | null | undefined;
  optionalStringValue?: string | null | undefined;
  mapValue: { [key: string]: string };
}

export interface Proto3TestMessage_MapValueEntry {
  key?: string | null;
  value?: string | null;
}

function createBaseProto3TestMessage(): Proto3TestMessage {
  return {
    boolValue: null,
    intValue: null,
    stringValue: null,
    optionalBoolValue: null,
    optionalIntValue: null,
    optionalStringValue: null,
    mapValue: {},
  };
}

export const Proto3TestMessage: MessageFns<Proto3TestMessage> = {
  encode(message: Proto3TestMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.boolValue !== undefined && message.boolValue !== null) {
      writer.uint32(8).bool(message.boolValue);
    }
    if (message.intValue !== undefined && message.intValue !== null) {
      writer.uint32(16).int32(message.intValue);
    }
    if (message.stringValue !== undefined && message.stringValue !== null) {
      writer.uint32(26).string(message.stringValue);
    }
    if (message.optionalBoolValue !== undefined && message.optionalBoolValue !== null) {
      writer.uint32(32).bool(message.optionalBoolValue);
    }
    if (message.optionalIntValue !== undefined && message.optionalIntValue !== null) {
      writer.uint32(40).int32(message.optionalIntValue);
    }
    if (message.optionalStringValue !== undefined && message.optionalStringValue !== null) {
      writer.uint32(50).string(message.optionalStringValue);
    }
    Object.entries(message.mapValue).forEach(([key, value]) => {
      Proto3TestMessage_MapValueEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Proto3TestMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProto3TestMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.boolValue = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.intValue = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.stringValue = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.optionalBoolValue = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.optionalIntValue = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.optionalStringValue = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          const entry7 = Proto3TestMessage_MapValueEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined && entry7.value !== null && entry7.key !== undefined && entry7.key !== null) {
            message.mapValue[entry7.key] = entry7.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Proto3TestMessage {
    return {
      boolValue: isSet(object.boolValue) ? globalThis.Boolean(object.boolValue) : null,
      intValue: isSet(object.intValue) ? globalThis.Number(object.intValue) : null,
      stringValue: isSet(object.stringValue) ? globalThis.String(object.stringValue) : null,
      optionalBoolValue: isSet(object.optionalBoolValue) ? globalThis.Boolean(object.optionalBoolValue) : null,
      optionalIntValue: isSet(object.optionalIntValue) ? globalThis.Number(object.optionalIntValue) : null,
      optionalStringValue: isSet(object.optionalStringValue) ? globalThis.String(object.optionalStringValue) : null,
      mapValue: isObject(object.mapValue)
        ? Object.entries(object.mapValue).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: Proto3TestMessage): unknown {
    const obj: any = {};
    if (message.boolValue !== undefined && message.boolValue !== null) {
      obj.boolValue = message.boolValue;
    }
    if (message.intValue !== undefined && message.intValue !== null) {
      obj.intValue = Math.round(message.intValue);
    }
    if (message.stringValue !== undefined && message.stringValue !== null) {
      obj.stringValue = message.stringValue;
    }
    if (message.optionalBoolValue !== undefined && message.optionalBoolValue !== null) {
      obj.optionalBoolValue = message.optionalBoolValue;
    }
    if (message.optionalIntValue !== undefined && message.optionalIntValue !== null) {
      obj.optionalIntValue = Math.round(message.optionalIntValue);
    }
    if (message.optionalStringValue !== undefined && message.optionalStringValue !== null) {
      obj.optionalStringValue = message.optionalStringValue;
    }
    if (message.mapValue) {
      const entries = Object.entries(message.mapValue);
      if (entries.length > 0) {
        obj.mapValue = {};
        entries.forEach(([k, v]) => {
          obj.mapValue[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Proto3TestMessage>, I>>(base?: I): Proto3TestMessage {
    return Proto3TestMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Proto3TestMessage>, I>>(object: I): Proto3TestMessage {
    const message = createBaseProto3TestMessage();
    message.boolValue = object.boolValue ?? null;
    message.intValue = object.intValue ?? null;
    message.stringValue = object.stringValue ?? null;
    message.optionalBoolValue = object.optionalBoolValue ?? undefined;
    message.optionalIntValue = object.optionalIntValue ?? undefined;
    message.optionalStringValue = object.optionalStringValue ?? undefined;
    message.mapValue = Object.entries(object.mapValue ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseProto3TestMessage_MapValueEntry(): Proto3TestMessage_MapValueEntry {
  return { key: null, value: null };
}

export const Proto3TestMessage_MapValueEntry: MessageFns<Proto3TestMessage_MapValueEntry> = {
  encode(message: Proto3TestMessage_MapValueEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined && message.key !== null) {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined && message.value !== null) {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Proto3TestMessage_MapValueEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProto3TestMessage_MapValueEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Proto3TestMessage_MapValueEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : null,
      value: isSet(object.value) ? globalThis.String(object.value) : null,
    };
  },

  toJSON(message: Proto3TestMessage_MapValueEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined && message.key !== null) {
      obj.key = message.key;
    }
    if (message.value !== undefined && message.value !== null) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Proto3TestMessage_MapValueEntry>, I>>(base?: I): Proto3TestMessage_MapValueEntry {
    return Proto3TestMessage_MapValueEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Proto3TestMessage_MapValueEntry>, I>>(
    object: I,
  ): Proto3TestMessage_MapValueEntry {
    const message = createBaseProto3TestMessage_MapValueEntry();
    message.key = object.key ?? null;
    message.value = object.value ?? null;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
