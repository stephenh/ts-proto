// source: example.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_gogo_protobuf_gogoproto_gogo_pb = require('./github.com/gogo/protobuf/gogoproto/gogo_pb.js');
goog.object.extend(proto, github_com_gogo_protobuf_gogoproto_gogo_pb);
var types_pb = require('./types_pb.js');
goog.object.extend(proto, types_pb);
goog.exportSymbol('proto.rpx.DashAPICredsCreateReq', null, global);
goog.exportSymbol('proto.rpx.DashAPICredsDeleteReq', null, global);
goog.exportSymbol('proto.rpx.DashAPICredsUpdateReq', null, global);
goog.exportSymbol('proto.rpx.DashCred', null, global);
goog.exportSymbol('proto.rpx.DashFlash', null, global);
goog.exportSymbol('proto.rpx.DashFlash.Type', null, global);
goog.exportSymbol('proto.rpx.DashUserSettingsState', null, global);
goog.exportSymbol('proto.rpx.DashUserSettingsState.URLs', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpx.DashFlash = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpx.DashFlash, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpx.DashFlash.displayName = 'proto.rpx.DashFlash';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpx.DashUserSettingsState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpx.DashUserSettingsState.repeatedFields_, null);
};
goog.inherits(proto.rpx.DashUserSettingsState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpx.DashUserSettingsState.displayName = 'proto.rpx.DashUserSettingsState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpx.DashUserSettingsState.URLs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpx.DashUserSettingsState.URLs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpx.DashUserSettingsState.URLs.displayName = 'proto.rpx.DashUserSettingsState.URLs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpx.DashCred = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpx.DashCred, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpx.DashCred.displayName = 'proto.rpx.DashCred';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpx.DashAPICredsCreateReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpx.DashAPICredsCreateReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpx.DashAPICredsCreateReq.displayName = 'proto.rpx.DashAPICredsCreateReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpx.DashAPICredsUpdateReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpx.DashAPICredsUpdateReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpx.DashAPICredsUpdateReq.displayName = 'proto.rpx.DashAPICredsUpdateReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpx.DashAPICredsDeleteReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpx.DashAPICredsDeleteReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpx.DashAPICredsDeleteReq.displayName = 'proto.rpx.DashAPICredsDeleteReq';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpx.DashFlash.prototype.toObject = function(opt_includeInstance) {
  return proto.rpx.DashFlash.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpx.DashFlash} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpx.DashFlash.toObject = function(includeInstance, msg) {
  var f, obj = {
    msg: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpx.DashFlash}
 */
proto.rpx.DashFlash.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpx.DashFlash;
  return proto.rpx.DashFlash.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpx.DashFlash} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpx.DashFlash}
 */
proto.rpx.DashFlash.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    case 2:
      var value = /** @type {!proto.rpx.DashFlash.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpx.DashFlash.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpx.DashFlash.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpx.DashFlash} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpx.DashFlash.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.rpx.DashFlash.Type = {
  UNDEFINED: 0,
  SUCCESS: 1,
  WARN: 2,
  ERROR: 3
};

/**
 * optional string msg = 1;
 * @return {string}
 */
proto.rpx.DashFlash.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpx.DashFlash} returns this
 */
proto.rpx.DashFlash.prototype.setMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Type type = 2;
 * @return {!proto.rpx.DashFlash.Type}
 */
proto.rpx.DashFlash.prototype.getType = function() {
  return /** @type {!proto.rpx.DashFlash.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.rpx.DashFlash.Type} value
 * @return {!proto.rpx.DashFlash} returns this
 */
proto.rpx.DashFlash.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpx.DashUserSettingsState.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpx.DashUserSettingsState.prototype.toObject = function(opt_includeInstance) {
  return proto.rpx.DashUserSettingsState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpx.DashUserSettingsState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpx.DashUserSettingsState.toObject = function(includeInstance, msg) {
  var f, obj = {
    email: jspb.Message.getFieldWithDefault(msg, 1, ""),
    urls: (f = msg.getUrls()) && proto.rpx.DashUserSettingsState.URLs.toObject(includeInstance, f),
    flashesList: jspb.Message.toObjectList(msg.getFlashesList(),
    proto.rpx.DashFlash.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpx.DashUserSettingsState}
 */
proto.rpx.DashUserSettingsState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpx.DashUserSettingsState;
  return proto.rpx.DashUserSettingsState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpx.DashUserSettingsState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpx.DashUserSettingsState}
 */
proto.rpx.DashUserSettingsState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 6:
      var value = new proto.rpx.DashUserSettingsState.URLs;
      reader.readMessage(value,proto.rpx.DashUserSettingsState.URLs.deserializeBinaryFromReader);
      msg.setUrls(value);
      break;
    case 7:
      var value = new proto.rpx.DashFlash;
      reader.readMessage(value,proto.rpx.DashFlash.deserializeBinaryFromReader);
      msg.addFlashes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpx.DashUserSettingsState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpx.DashUserSettingsState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpx.DashUserSettingsState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpx.DashUserSettingsState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUrls();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rpx.DashUserSettingsState.URLs.serializeBinaryToWriter
    );
  }
  f = message.getFlashesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.rpx.DashFlash.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpx.DashUserSettingsState.URLs.prototype.toObject = function(opt_includeInstance) {
  return proto.rpx.DashUserSettingsState.URLs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpx.DashUserSettingsState.URLs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpx.DashUserSettingsState.URLs.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectGoogle: jspb.Message.getFieldWithDefault(msg, 1, ""),
    connectGithub: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpx.DashUserSettingsState.URLs}
 */
proto.rpx.DashUserSettingsState.URLs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpx.DashUserSettingsState.URLs;
  return proto.rpx.DashUserSettingsState.URLs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpx.DashUserSettingsState.URLs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpx.DashUserSettingsState.URLs}
 */
proto.rpx.DashUserSettingsState.URLs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectGoogle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectGithub(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpx.DashUserSettingsState.URLs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpx.DashUserSettingsState.URLs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpx.DashUserSettingsState.URLs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpx.DashUserSettingsState.URLs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectGoogle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConnectGithub();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string connect_google = 1;
 * @return {string}
 */
proto.rpx.DashUserSettingsState.URLs.prototype.getConnectGoogle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpx.DashUserSettingsState.URLs} returns this
 */
proto.rpx.DashUserSettingsState.URLs.prototype.setConnectGoogle = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string connect_github = 2;
 * @return {string}
 */
proto.rpx.DashUserSettingsState.URLs.prototype.getConnectGithub = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpx.DashUserSettingsState.URLs} returns this
 */
proto.rpx.DashUserSettingsState.URLs.prototype.setConnectGithub = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string email = 1;
 * @return {string}
 */
proto.rpx.DashUserSettingsState.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpx.DashUserSettingsState} returns this
 */
proto.rpx.DashUserSettingsState.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional URLs urls = 6;
 * @return {?proto.rpx.DashUserSettingsState.URLs}
 */
proto.rpx.DashUserSettingsState.prototype.getUrls = function() {
  return /** @type{?proto.rpx.DashUserSettingsState.URLs} */ (
    jspb.Message.getWrapperField(this, proto.rpx.DashUserSettingsState.URLs, 6));
};


/**
 * @param {?proto.rpx.DashUserSettingsState.URLs|undefined} value
 * @return {!proto.rpx.DashUserSettingsState} returns this
*/
proto.rpx.DashUserSettingsState.prototype.setUrls = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpx.DashUserSettingsState} returns this
 */
proto.rpx.DashUserSettingsState.prototype.clearUrls = function() {
  return this.setUrls(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpx.DashUserSettingsState.prototype.hasUrls = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated DashFlash flashes = 7;
 * @return {!Array<!proto.rpx.DashFlash>}
 */
proto.rpx.DashUserSettingsState.prototype.getFlashesList = function() {
  return /** @type{!Array<!proto.rpx.DashFlash>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpx.DashFlash, 7));
};


/**
 * @param {!Array<!proto.rpx.DashFlash>} value
 * @return {!proto.rpx.DashUserSettingsState} returns this
*/
proto.rpx.DashUserSettingsState.prototype.setFlashesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.rpx.DashFlash=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpx.DashFlash}
 */
proto.rpx.DashUserSettingsState.prototype.addFlashes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.rpx.DashFlash, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rpx.DashUserSettingsState} returns this
 */
proto.rpx.DashUserSettingsState.prototype.clearFlashesList = function() {
  return this.setFlashesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpx.DashCred.prototype.toObject = function(opt_includeInstance) {
  return proto.rpx.DashCred.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpx.DashCred} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpx.DashCred.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    metadata: jspb.Message.getFieldWithDefault(msg, 3, ""),
    token: jspb.Message.getFieldWithDefault(msg, 4, ""),
    id: (f = msg.getId()) && types_pb.ID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpx.DashCred}
 */
proto.rpx.DashCred.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpx.DashCred;
  return proto.rpx.DashCred.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpx.DashCred} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpx.DashCred}
 */
proto.rpx.DashCred.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetadata(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 7:
      var value = new types_pb.ID;
      reader.readMessage(value,types_pb.ID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpx.DashCred.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpx.DashCred.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpx.DashCred} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpx.DashCred.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMetadata();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      types_pb.ID.serializeBinaryToWriter
    );
  }
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.rpx.DashCred.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpx.DashCred} returns this
 */
proto.rpx.DashCred.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string metadata = 3;
 * @return {string}
 */
proto.rpx.DashCred.prototype.getMetadata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpx.DashCred} returns this
 */
proto.rpx.DashCred.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string token = 4;
 * @return {string}
 */
proto.rpx.DashCred.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpx.DashCred} returns this
 */
proto.rpx.DashCred.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional pb.ID id = 7;
 * @return {?proto.pb.ID}
 */
proto.rpx.DashCred.prototype.getId = function() {
  return /** @type{?proto.pb.ID} */ (
    jspb.Message.getWrapperField(this, types_pb.ID, 7));
};


/**
 * @param {?proto.pb.ID|undefined} value
 * @return {!proto.rpx.DashCred} returns this
*/
proto.rpx.DashCred.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpx.DashCred} returns this
 */
proto.rpx.DashCred.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpx.DashCred.prototype.hasId = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpx.DashAPICredsCreateReq.prototype.toObject = function(opt_includeInstance) {
  return proto.rpx.DashAPICredsCreateReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpx.DashAPICredsCreateReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpx.DashAPICredsCreateReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    metadata: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpx.DashAPICredsCreateReq}
 */
proto.rpx.DashAPICredsCreateReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpx.DashAPICredsCreateReq;
  return proto.rpx.DashAPICredsCreateReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpx.DashAPICredsCreateReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpx.DashAPICredsCreateReq}
 */
proto.rpx.DashAPICredsCreateReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpx.DashAPICredsCreateReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpx.DashAPICredsCreateReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpx.DashAPICredsCreateReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpx.DashAPICredsCreateReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMetadata();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string description = 1;
 * @return {string}
 */
proto.rpx.DashAPICredsCreateReq.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpx.DashAPICredsCreateReq} returns this
 */
proto.rpx.DashAPICredsCreateReq.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string metadata = 2;
 * @return {string}
 */
proto.rpx.DashAPICredsCreateReq.prototype.getMetadata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpx.DashAPICredsCreateReq} returns this
 */
proto.rpx.DashAPICredsCreateReq.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpx.DashAPICredsUpdateReq.prototype.toObject = function(opt_includeInstance) {
  return proto.rpx.DashAPICredsUpdateReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpx.DashAPICredsUpdateReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpx.DashAPICredsUpdateReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    credSid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    metadata: jspb.Message.getFieldWithDefault(msg, 3, ""),
    id: (f = msg.getId()) && types_pb.ID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpx.DashAPICredsUpdateReq}
 */
proto.rpx.DashAPICredsUpdateReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpx.DashAPICredsUpdateReq;
  return proto.rpx.DashAPICredsUpdateReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpx.DashAPICredsUpdateReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpx.DashAPICredsUpdateReq}
 */
proto.rpx.DashAPICredsUpdateReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCredSid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetadata(value);
      break;
    case 5:
      var value = new types_pb.ID;
      reader.readMessage(value,types_pb.ID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpx.DashAPICredsUpdateReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpx.DashAPICredsUpdateReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpx.DashAPICredsUpdateReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpx.DashAPICredsUpdateReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCredSid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMetadata();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      types_pb.ID.serializeBinaryToWriter
    );
  }
};


/**
 * optional string cred_sid = 1;
 * @return {string}
 */
proto.rpx.DashAPICredsUpdateReq.prototype.getCredSid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpx.DashAPICredsUpdateReq} returns this
 */
proto.rpx.DashAPICredsUpdateReq.prototype.setCredSid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.rpx.DashAPICredsUpdateReq.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpx.DashAPICredsUpdateReq} returns this
 */
proto.rpx.DashAPICredsUpdateReq.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string metadata = 3;
 * @return {string}
 */
proto.rpx.DashAPICredsUpdateReq.prototype.getMetadata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpx.DashAPICredsUpdateReq} returns this
 */
proto.rpx.DashAPICredsUpdateReq.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional pb.ID id = 5;
 * @return {?proto.pb.ID}
 */
proto.rpx.DashAPICredsUpdateReq.prototype.getId = function() {
  return /** @type{?proto.pb.ID} */ (
    jspb.Message.getWrapperField(this, types_pb.ID, 5));
};


/**
 * @param {?proto.pb.ID|undefined} value
 * @return {!proto.rpx.DashAPICredsUpdateReq} returns this
*/
proto.rpx.DashAPICredsUpdateReq.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpx.DashAPICredsUpdateReq} returns this
 */
proto.rpx.DashAPICredsUpdateReq.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpx.DashAPICredsUpdateReq.prototype.hasId = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpx.DashAPICredsDeleteReq.prototype.toObject = function(opt_includeInstance) {
  return proto.rpx.DashAPICredsDeleteReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpx.DashAPICredsDeleteReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpx.DashAPICredsDeleteReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    credSid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: (f = msg.getId()) && types_pb.ID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpx.DashAPICredsDeleteReq}
 */
proto.rpx.DashAPICredsDeleteReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpx.DashAPICredsDeleteReq;
  return proto.rpx.DashAPICredsDeleteReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpx.DashAPICredsDeleteReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpx.DashAPICredsDeleteReq}
 */
proto.rpx.DashAPICredsDeleteReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCredSid(value);
      break;
    case 3:
      var value = new types_pb.ID;
      reader.readMessage(value,types_pb.ID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpx.DashAPICredsDeleteReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpx.DashAPICredsDeleteReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpx.DashAPICredsDeleteReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpx.DashAPICredsDeleteReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCredSid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      types_pb.ID.serializeBinaryToWriter
    );
  }
};


/**
 * optional string cred_sid = 1;
 * @return {string}
 */
proto.rpx.DashAPICredsDeleteReq.prototype.getCredSid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpx.DashAPICredsDeleteReq} returns this
 */
proto.rpx.DashAPICredsDeleteReq.prototype.setCredSid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional pb.ID id = 3;
 * @return {?proto.pb.ID}
 */
proto.rpx.DashAPICredsDeleteReq.prototype.getId = function() {
  return /** @type{?proto.pb.ID} */ (
    jspb.Message.getWrapperField(this, types_pb.ID, 3));
};


/**
 * @param {?proto.pb.ID|undefined} value
 * @return {!proto.rpx.DashAPICredsDeleteReq} returns this
*/
proto.rpx.DashAPICredsDeleteReq.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpx.DashAPICredsDeleteReq} returns this
 */
proto.rpx.DashAPICredsDeleteReq.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpx.DashAPICredsDeleteReq.prototype.hasId = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.rpx);
