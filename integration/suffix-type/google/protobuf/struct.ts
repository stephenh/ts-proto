// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// source: google/protobuf/struct.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "google.protobuf";

/**
 * `NullValue` is a singleton enumeration to represent the null value for the
 * `Value` type union.
 *
 *  The JSON representation for `NullValue` is JSON `null`.
 */
export enum GRPCPNullValueGRPCS {
  /** NULL_VALUE - Null value. */
  NULL_VALUE = 0,
  UNRECOGNIZED = -1,
}

export function gRPCPNullValueGRPCSFromJSON(object: any): GRPCPNullValueGRPCS {
  switch (object) {
    case 0:
    case "NULL_VALUE":
      return GRPCPNullValueGRPCS.NULL_VALUE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GRPCPNullValueGRPCS.UNRECOGNIZED;
  }
}

export function gRPCPNullValueGRPCSToJSON(object: GRPCPNullValueGRPCS): string {
  switch (object) {
    case GRPCPNullValueGRPCS.NULL_VALUE:
      return "NULL_VALUE";
    case GRPCPNullValueGRPCS.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * `Struct` represents a structured data value, consisting of fields
 * which map to dynamically typed values. In some languages, `Struct`
 * might be supported by a native representation. For example, in
 * scripting languages like JS a struct is represented as an
 * object. The details of that representation are described together
 * with the proto support for the language.
 *
 * The JSON representation for `Struct` is JSON object.
 */
export interface GRPCPStructGRPCS {
  /** Unordered map of dynamically typed values. */
  fields: { [key: string]: any | undefined };
}

export interface GRPCPStruct_FieldsEntryGRPCS {
  key: string;
  value: any | undefined;
}

/**
 * `Value` represents a dynamically typed value which can be either
 * null, a number, a string, a boolean, a recursive struct value, or a
 * list of values. A producer of value is expected to set one of these
 * variants. Absence of any variant indicates an error.
 *
 * The JSON representation for `Value` is JSON value.
 */
export interface GRPCPValueGRPCS {
  /** Represents a null value. */
  nullValue?:
    | GRPCPNullValueGRPCS
    | undefined;
  /** Represents a double value. */
  numberValue?:
    | number
    | undefined;
  /** Represents a string value. */
  stringValue?:
    | string
    | undefined;
  /** Represents a boolean value. */
  boolValue?:
    | boolean
    | undefined;
  /** Represents a structured value. */
  structValue?:
    | { [key: string]: any }
    | undefined;
  /** Represents a repeated `Value`. */
  listValue?: Array<any> | undefined;
}

/**
 * `ListValue` is a wrapper around a repeated field of values.
 *
 * The JSON representation for `ListValue` is JSON array.
 */
export interface GRPCPListValueGRPCS {
  /** Repeated field of dynamically typed values. */
  values: any[];
}

function createBaseGRPCPStructGRPCS(): GRPCPStructGRPCS {
  return { fields: {} };
}

export const GRPCPStructGRPCS: MessageFns<GRPCPStructGRPCS> & StructWrapperFns = {
  encode(message: GRPCPStructGRPCS, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.fields).forEach(([key, value]) => {
      if (value !== undefined) {
        GRPCPStruct_FieldsEntryGRPCS.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
      }
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GRPCPStructGRPCS {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGRPCPStructGRPCS();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = GRPCPStruct_FieldsEntryGRPCS.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.fields[entry1.key] = entry1.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GRPCPStructGRPCS {
    return {
      fields: isObject(object.fields)
        ? Object.entries(object.fields).reduce<{ [key: string]: any | undefined }>((acc, [key, value]) => {
          acc[key] = value as any | undefined;
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: GRPCPStructGRPCS): unknown {
    const obj: any = {};
    if (message.fields) {
      const entries = Object.entries(message.fields);
      if (entries.length > 0) {
        obj.fields = {};
        entries.forEach(([k, v]) => {
          obj.fields[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GRPCPStructGRPCS>, I>>(base?: I): GRPCPStructGRPCS {
    return GRPCPStructGRPCS.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GRPCPStructGRPCS>, I>>(object: I): GRPCPStructGRPCS {
    const message = createBaseGRPCPStructGRPCS();
    message.fields = Object.entries(object.fields ?? {}).reduce<{ [key: string]: any | undefined }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value;
        }
        return acc;
      },
      {},
    );
    return message;
  },

  wrap(object: { [key: string]: any } | undefined): GRPCPStructGRPCS {
    const struct = createBaseGRPCPStructGRPCS();

    if (object !== undefined) {
      for (const key of Object.keys(object)) {
        struct.fields[key] = object[key];
      }
    }
    return struct;
  },

  unwrap(message: GRPCPStructGRPCS): { [key: string]: any } {
    const object: { [key: string]: any } = {};
    if (message.fields) {
      for (const key of Object.keys(message.fields)) {
        object[key] = message.fields[key];
      }
    }
    return object;
  },
};

function createBaseGRPCPStruct_FieldsEntryGRPCS(): GRPCPStruct_FieldsEntryGRPCS {
  return { key: "", value: undefined };
}

export const GRPCPStruct_FieldsEntryGRPCS: MessageFns<GRPCPStruct_FieldsEntryGRPCS> = {
  encode(message: GRPCPStruct_FieldsEntryGRPCS, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      GRPCPValueGRPCS.encode(GRPCPValueGRPCS.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GRPCPStruct_FieldsEntryGRPCS {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGRPCPStruct_FieldsEntryGRPCS();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = GRPCPValueGRPCS.unwrap(GRPCPValueGRPCS.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GRPCPStruct_FieldsEntryGRPCS {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object?.value) ? object.value : undefined,
    };
  },

  toJSON(message: GRPCPStruct_FieldsEntryGRPCS): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GRPCPStruct_FieldsEntryGRPCS>, I>>(base?: I): GRPCPStruct_FieldsEntryGRPCS {
    return GRPCPStruct_FieldsEntryGRPCS.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GRPCPStruct_FieldsEntryGRPCS>, I>>(object: I): GRPCPStruct_FieldsEntryGRPCS {
    const message = createBaseGRPCPStruct_FieldsEntryGRPCS();
    message.key = object.key ?? "";
    message.value = object.value ?? undefined;
    return message;
  },
};

function createBaseGRPCPValueGRPCS(): GRPCPValueGRPCS {
  return {
    nullValue: undefined,
    numberValue: undefined,
    stringValue: undefined,
    boolValue: undefined,
    structValue: undefined,
    listValue: undefined,
  };
}

export const GRPCPValueGRPCS: MessageFns<GRPCPValueGRPCS> & AnyValueWrapperFns = {
  encode(message: GRPCPValueGRPCS, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nullValue !== undefined) {
      writer.uint32(8).int32(message.nullValue);
    }
    if (message.numberValue !== undefined) {
      writer.uint32(17).double(message.numberValue);
    }
    if (message.stringValue !== undefined) {
      writer.uint32(26).string(message.stringValue);
    }
    if (message.boolValue !== undefined) {
      writer.uint32(32).bool(message.boolValue);
    }
    if (message.structValue !== undefined) {
      GRPCPStructGRPCS.encode(GRPCPStructGRPCS.wrap(message.structValue), writer.uint32(42).fork()).join();
    }
    if (message.listValue !== undefined) {
      GRPCPListValueGRPCS.encode(GRPCPListValueGRPCS.wrap(message.listValue), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GRPCPValueGRPCS {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGRPCPValueGRPCS();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.nullValue = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.numberValue = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.stringValue = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.boolValue = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.structValue = GRPCPStructGRPCS.unwrap(GRPCPStructGRPCS.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.listValue = GRPCPListValueGRPCS.unwrap(GRPCPListValueGRPCS.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GRPCPValueGRPCS {
    return {
      nullValue: isSet(object.nullValue) ? gRPCPNullValueGRPCSFromJSON(object.nullValue) : undefined,
      numberValue: isSet(object.numberValue) ? globalThis.Number(object.numberValue) : undefined,
      stringValue: isSet(object.stringValue) ? globalThis.String(object.stringValue) : undefined,
      boolValue: isSet(object.boolValue) ? globalThis.Boolean(object.boolValue) : undefined,
      structValue: isObject(object.structValue) ? object.structValue : undefined,
      listValue: globalThis.Array.isArray(object.listValue) ? [...object.listValue] : undefined,
    };
  },

  toJSON(message: GRPCPValueGRPCS): unknown {
    const obj: any = {};
    if (message.nullValue !== undefined) {
      obj.nullValue = gRPCPNullValueGRPCSToJSON(message.nullValue);
    }
    if (message.numberValue !== undefined) {
      obj.numberValue = message.numberValue;
    }
    if (message.stringValue !== undefined) {
      obj.stringValue = message.stringValue;
    }
    if (message.boolValue !== undefined) {
      obj.boolValue = message.boolValue;
    }
    if (message.structValue !== undefined) {
      obj.structValue = message.structValue;
    }
    if (message.listValue !== undefined) {
      obj.listValue = message.listValue;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GRPCPValueGRPCS>, I>>(base?: I): GRPCPValueGRPCS {
    return GRPCPValueGRPCS.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GRPCPValueGRPCS>, I>>(object: I): GRPCPValueGRPCS {
    const message = createBaseGRPCPValueGRPCS();
    message.nullValue = object.nullValue ?? undefined;
    message.numberValue = object.numberValue ?? undefined;
    message.stringValue = object.stringValue ?? undefined;
    message.boolValue = object.boolValue ?? undefined;
    message.structValue = object.structValue ?? undefined;
    message.listValue = object.listValue ?? undefined;
    return message;
  },

  wrap(value: any): GRPCPValueGRPCS {
    const result = createBaseGRPCPValueGRPCS();
    if (value === null) {
      result.nullValue = GRPCPNullValueGRPCS.NULL_VALUE;
    } else if (typeof value === "boolean") {
      result.boolValue = value;
    } else if (typeof value === "number") {
      result.numberValue = value;
    } else if (typeof value === "string") {
      result.stringValue = value;
    } else if (globalThis.Array.isArray(value)) {
      result.listValue = value;
    } else if (typeof value === "object") {
      result.structValue = value;
    } else if (typeof value !== "undefined") {
      throw new globalThis.Error("Unsupported any value type: " + typeof value);
    }
    return result;
  },

  unwrap(message: any): string | number | boolean | Object | null | Array<any> | undefined {
    if (message.stringValue !== undefined) {
      return message.stringValue;
    } else if (message?.numberValue !== undefined) {
      return message.numberValue;
    } else if (message?.boolValue !== undefined) {
      return message.boolValue;
    } else if (message?.structValue !== undefined) {
      return message.structValue as any;
    } else if (message?.listValue !== undefined) {
      return message.listValue;
    } else if (message?.nullValue !== undefined) {
      return null;
    }
    return undefined;
  },
};

function createBaseGRPCPListValueGRPCS(): GRPCPListValueGRPCS {
  return { values: [] };
}

export const GRPCPListValueGRPCS: MessageFns<GRPCPListValueGRPCS> & ListValueWrapperFns = {
  encode(message: GRPCPListValueGRPCS, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.values) {
      GRPCPValueGRPCS.encode(GRPCPValueGRPCS.wrap(v!), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GRPCPListValueGRPCS {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGRPCPListValueGRPCS();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.values.push(GRPCPValueGRPCS.unwrap(GRPCPValueGRPCS.decode(reader, reader.uint32())));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GRPCPListValueGRPCS {
    return { values: globalThis.Array.isArray(object?.values) ? [...object.values] : [] };
  },

  toJSON(message: GRPCPListValueGRPCS): unknown {
    const obj: any = {};
    if (message.values?.length) {
      obj.values = message.values;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GRPCPListValueGRPCS>, I>>(base?: I): GRPCPListValueGRPCS {
    return GRPCPListValueGRPCS.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GRPCPListValueGRPCS>, I>>(object: I): GRPCPListValueGRPCS {
    const message = createBaseGRPCPListValueGRPCS();
    message.values = object.values?.map((e) => e) || [];
    return message;
  },

  wrap(array: Array<any> | undefined): GRPCPListValueGRPCS {
    const result = createBaseGRPCPListValueGRPCS();
    result.values = array ?? [];
    return result;
  },

  unwrap(message: GRPCPListValueGRPCS): Array<any> {
    if (message?.hasOwnProperty("values") && globalThis.Array.isArray(message.values)) {
      return message.values;
    } else {
      return message as any;
    }
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

export interface StructWrapperFns {
  wrap(object: { [key: string]: any } | undefined): GRPCPStructGRPCS;
  unwrap(message: GRPCPStructGRPCS): { [key: string]: any };
}

export interface AnyValueWrapperFns {
  wrap(value: any): GRPCPValueGRPCS;
  unwrap(message: any): string | number | boolean | Object | null | Array<any> | undefined;
}

export interface ListValueWrapperFns {
  wrap(array: Array<any> | undefined): GRPCPListValueGRPCS;
  unwrap(message: GRPCPListValueGRPCS): Array<any>;
}
