// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// source: request_response.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "";

export interface Request {
  requestId: string;
  nested: Request_Nested | undefined;
}

export interface Request_Nested {
  moreData: string;
}

export interface Response {
  responseId: string;
}

export const Request: MessageFns<Request> = {
  encode(message: Request, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.nested !== undefined) {
      Request_Nested.encode(message.nested, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(_: BinaryReader | Uint8Array, length?: number): Request {
    throw new Error("decode not generated for Request");
  },
};

export const Request_Nested: MessageFns<Request_Nested> = {
  encode(message: Request_Nested, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.moreData !== "") {
      writer.uint32(10).string(message.moreData);
    }
    return writer;
  },

  decode(_: BinaryReader | Uint8Array, length?: number): Request_Nested {
    throw new Error("decode not generated for Request_Nested");
  },
};

function createBaseResponse(): Response {
  return { responseId: "" };
}

export const Response: MessageFns<Response> = {
  encode(_: Response, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    throw new Error("encode not generated for Response");
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Response {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.responseId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
