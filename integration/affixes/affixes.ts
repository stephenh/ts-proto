// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// source: affixes.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PrefixTimestampSuffix } from "./google/protobuf/timestamp";
import { PrefixUInt64ValueSuffix } from "./google/protobuf/wrappers";

export const protobufPackage = "affixes";

export enum PrefixAwesomeEnumSuffix {
  AWESOME_ENUM_AWESOME = 0,
  AWESOME_ENUM_COOL = 1,
  AWESOME_ENUM_JUST_OKAY = 2,
  UNRECOGNIZED = -1,
}

export function prefixAwesomeEnumSuffixFromJSON(object: any): PrefixAwesomeEnumSuffix {
  switch (object) {
    case 0:
    case "AWESOME_ENUM_AWESOME":
      return PrefixAwesomeEnumSuffix.AWESOME_ENUM_AWESOME;
    case 1:
    case "AWESOME_ENUM_COOL":
      return PrefixAwesomeEnumSuffix.AWESOME_ENUM_COOL;
    case 2:
    case "AWESOME_ENUM_JUST_OKAY":
      return PrefixAwesomeEnumSuffix.AWESOME_ENUM_JUST_OKAY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PrefixAwesomeEnumSuffix.UNRECOGNIZED;
  }
}

export function prefixAwesomeEnumSuffixToJSON(object: PrefixAwesomeEnumSuffix): string {
  switch (object) {
    case PrefixAwesomeEnumSuffix.AWESOME_ENUM_AWESOME:
      return "AWESOME_ENUM_AWESOME";
    case PrefixAwesomeEnumSuffix.AWESOME_ENUM_COOL:
      return "AWESOME_ENUM_COOL";
    case PrefixAwesomeEnumSuffix.AWESOME_ENUM_JUST_OKAY:
      return "AWESOME_ENUM_JUST_OKAY";
    case PrefixAwesomeEnumSuffix.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PrefixAwesomeMessageSuffix {
}

export interface PrefixAwesomeMessage_InnerSuffix {
}

export interface PrefixGoogleSuffix {
  guint64: number | undefined;
  timestamp: Date | undefined;
}

function createBasePrefixAwesomeMessageSuffix(): PrefixAwesomeMessageSuffix {
  return {};
}

export const PrefixAwesomeMessageSuffix: MessageFns<PrefixAwesomeMessageSuffix> = {
  encode(_: PrefixAwesomeMessageSuffix, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrefixAwesomeMessageSuffix {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrefixAwesomeMessageSuffix();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PrefixAwesomeMessageSuffix {
    return {};
  },

  toJSON(_: PrefixAwesomeMessageSuffix): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<PrefixAwesomeMessageSuffix>, I>>(base?: I): PrefixAwesomeMessageSuffix {
    return PrefixAwesomeMessageSuffix.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrefixAwesomeMessageSuffix>, I>>(_: I): PrefixAwesomeMessageSuffix {
    const message = createBasePrefixAwesomeMessageSuffix();
    return message;
  },
};

function createBasePrefixAwesomeMessage_InnerSuffix(): PrefixAwesomeMessage_InnerSuffix {
  return {};
}

export const PrefixAwesomeMessage_InnerSuffix: MessageFns<PrefixAwesomeMessage_InnerSuffix> = {
  encode(_: PrefixAwesomeMessage_InnerSuffix, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrefixAwesomeMessage_InnerSuffix {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrefixAwesomeMessage_InnerSuffix();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PrefixAwesomeMessage_InnerSuffix {
    return {};
  },

  toJSON(_: PrefixAwesomeMessage_InnerSuffix): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<PrefixAwesomeMessage_InnerSuffix>, I>>(
    base?: I,
  ): PrefixAwesomeMessage_InnerSuffix {
    return PrefixAwesomeMessage_InnerSuffix.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrefixAwesomeMessage_InnerSuffix>, I>>(
    _: I,
  ): PrefixAwesomeMessage_InnerSuffix {
    const message = createBasePrefixAwesomeMessage_InnerSuffix();
    return message;
  },
};

function createBasePrefixGoogleSuffix(): PrefixGoogleSuffix {
  return { guint64: undefined, timestamp: undefined };
}

export const PrefixGoogleSuffix: MessageFns<PrefixGoogleSuffix> = {
  encode(message: PrefixGoogleSuffix, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.guint64 !== undefined) {
      PrefixUInt64ValueSuffix.encode({ value: message.guint64! }, writer.uint32(106).fork()).join();
    }
    if (message.timestamp !== undefined) {
      PrefixTimestampSuffix.encode(toTimestamp(message.timestamp), writer.uint32(114).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrefixGoogleSuffix {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrefixGoogleSuffix();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.guint64 = PrefixUInt64ValueSuffix.decode(reader, reader.uint32()).value;
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.timestamp = fromTimestamp(PrefixTimestampSuffix.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrefixGoogleSuffix {
    return {
      guint64: isSet(object.guint64) ? Number(object.guint64) : undefined,
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
    };
  },

  toJSON(message: PrefixGoogleSuffix): unknown {
    const obj: any = {};
    if (message.guint64 !== undefined) {
      obj.guint64 = message.guint64;
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrefixGoogleSuffix>, I>>(base?: I): PrefixGoogleSuffix {
    return PrefixGoogleSuffix.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrefixGoogleSuffix>, I>>(object: I): PrefixGoogleSuffix {
    const message = createBasePrefixGoogleSuffix();
    message.guint64 = object.guint64 ?? undefined;
    message.timestamp = object.timestamp ?? undefined;
    return message;
  },
};

export interface AwesomeService {
}

export const AwesomeServiceServiceName = "affixes.AwesomeService";
export class AwesomeServiceClientImpl implements AwesomeService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || AwesomeServiceServiceName;
    this.rpc = rpc;
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): PrefixTimestampSuffix {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: PrefixTimestampSuffix): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(PrefixTimestampSuffix.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
