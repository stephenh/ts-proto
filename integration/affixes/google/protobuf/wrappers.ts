// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// source: google/protobuf/wrappers.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "google.protobuf";

/**
 * Wrapper message for `double`.
 *
 * The JSON representation for `DoubleValue` is JSON number.
 */
export interface PrefixDoubleValueSuffix {
  /** The double value. */
  value: number;
}

/**
 * Wrapper message for `float`.
 *
 * The JSON representation for `FloatValue` is JSON number.
 */
export interface PrefixFloatValueSuffix {
  /** The float value. */
  value: number;
}

/**
 * Wrapper message for `int64`.
 *
 * The JSON representation for `Int64Value` is JSON string.
 */
export interface PrefixInt64ValueSuffix {
  /** The int64 value. */
  value: number;
}

/**
 * Wrapper message for `uint64`.
 *
 * The JSON representation for `UInt64Value` is JSON string.
 */
export interface PrefixUInt64ValueSuffix {
  /** The uint64 value. */
  value: number;
}

/**
 * Wrapper message for `int32`.
 *
 * The JSON representation for `Int32Value` is JSON number.
 */
export interface PrefixInt32ValueSuffix {
  /** The int32 value. */
  value: number;
}

/**
 * Wrapper message for `uint32`.
 *
 * The JSON representation for `UInt32Value` is JSON number.
 */
export interface PrefixUInt32ValueSuffix {
  /** The uint32 value. */
  value: number;
}

/**
 * Wrapper message for `bool`.
 *
 * The JSON representation for `BoolValue` is JSON `true` and `false`.
 */
export interface PrefixBoolValueSuffix {
  /** The bool value. */
  value: boolean;
}

/**
 * Wrapper message for `string`.
 *
 * The JSON representation for `StringValue` is JSON string.
 */
export interface PrefixStringValueSuffix {
  /** The string value. */
  value: string;
}

/**
 * Wrapper message for `bytes`.
 *
 * The JSON representation for `BytesValue` is JSON string.
 */
export interface PrefixBytesValueSuffix {
  /** The bytes value. */
  value: Uint8Array;
}

function createBasePrefixDoubleValueSuffix(): PrefixDoubleValueSuffix {
  return { value: 0 };
}

export const PrefixDoubleValueSuffix: MessageFns<PrefixDoubleValueSuffix> = {
  encode(message: PrefixDoubleValueSuffix, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(9).double(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrefixDoubleValueSuffix {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrefixDoubleValueSuffix();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.value = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrefixDoubleValueSuffix {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: PrefixDoubleValueSuffix): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrefixDoubleValueSuffix>, I>>(base?: I): PrefixDoubleValueSuffix {
    return PrefixDoubleValueSuffix.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrefixDoubleValueSuffix>, I>>(object: I): PrefixDoubleValueSuffix {
    const message = createBasePrefixDoubleValueSuffix();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBasePrefixFloatValueSuffix(): PrefixFloatValueSuffix {
  return { value: 0 };
}

export const PrefixFloatValueSuffix: MessageFns<PrefixFloatValueSuffix> = {
  encode(message: PrefixFloatValueSuffix, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(13).float(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrefixFloatValueSuffix {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrefixFloatValueSuffix();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.value = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrefixFloatValueSuffix {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: PrefixFloatValueSuffix): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrefixFloatValueSuffix>, I>>(base?: I): PrefixFloatValueSuffix {
    return PrefixFloatValueSuffix.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrefixFloatValueSuffix>, I>>(object: I): PrefixFloatValueSuffix {
    const message = createBasePrefixFloatValueSuffix();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBasePrefixInt64ValueSuffix(): PrefixInt64ValueSuffix {
  return { value: 0 };
}

export const PrefixInt64ValueSuffix: MessageFns<PrefixInt64ValueSuffix> = {
  encode(message: PrefixInt64ValueSuffix, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(8).int64(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrefixInt64ValueSuffix {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrefixInt64ValueSuffix();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.value = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrefixInt64ValueSuffix {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: PrefixInt64ValueSuffix): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrefixInt64ValueSuffix>, I>>(base?: I): PrefixInt64ValueSuffix {
    return PrefixInt64ValueSuffix.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrefixInt64ValueSuffix>, I>>(object: I): PrefixInt64ValueSuffix {
    const message = createBasePrefixInt64ValueSuffix();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBasePrefixUInt64ValueSuffix(): PrefixUInt64ValueSuffix {
  return { value: 0 };
}

export const PrefixUInt64ValueSuffix: MessageFns<PrefixUInt64ValueSuffix> = {
  encode(message: PrefixUInt64ValueSuffix, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(8).uint64(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrefixUInt64ValueSuffix {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrefixUInt64ValueSuffix();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.value = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrefixUInt64ValueSuffix {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: PrefixUInt64ValueSuffix): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrefixUInt64ValueSuffix>, I>>(base?: I): PrefixUInt64ValueSuffix {
    return PrefixUInt64ValueSuffix.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrefixUInt64ValueSuffix>, I>>(object: I): PrefixUInt64ValueSuffix {
    const message = createBasePrefixUInt64ValueSuffix();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBasePrefixInt32ValueSuffix(): PrefixInt32ValueSuffix {
  return { value: 0 };
}

export const PrefixInt32ValueSuffix: MessageFns<PrefixInt32ValueSuffix> = {
  encode(message: PrefixInt32ValueSuffix, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(8).int32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrefixInt32ValueSuffix {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrefixInt32ValueSuffix();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.value = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrefixInt32ValueSuffix {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: PrefixInt32ValueSuffix): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrefixInt32ValueSuffix>, I>>(base?: I): PrefixInt32ValueSuffix {
    return PrefixInt32ValueSuffix.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrefixInt32ValueSuffix>, I>>(object: I): PrefixInt32ValueSuffix {
    const message = createBasePrefixInt32ValueSuffix();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBasePrefixUInt32ValueSuffix(): PrefixUInt32ValueSuffix {
  return { value: 0 };
}

export const PrefixUInt32ValueSuffix: MessageFns<PrefixUInt32ValueSuffix> = {
  encode(message: PrefixUInt32ValueSuffix, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(8).uint32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrefixUInt32ValueSuffix {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrefixUInt32ValueSuffix();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.value = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrefixUInt32ValueSuffix {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: PrefixUInt32ValueSuffix): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrefixUInt32ValueSuffix>, I>>(base?: I): PrefixUInt32ValueSuffix {
    return PrefixUInt32ValueSuffix.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrefixUInt32ValueSuffix>, I>>(object: I): PrefixUInt32ValueSuffix {
    const message = createBasePrefixUInt32ValueSuffix();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBasePrefixBoolValueSuffix(): PrefixBoolValueSuffix {
  return { value: false };
}

export const PrefixBoolValueSuffix: MessageFns<PrefixBoolValueSuffix> = {
  encode(message: PrefixBoolValueSuffix, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== false) {
      writer.uint32(8).bool(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrefixBoolValueSuffix {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrefixBoolValueSuffix();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.value = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrefixBoolValueSuffix {
    return { value: isSet(object.value) ? globalThis.Boolean(object.value) : false };
  },

  toJSON(message: PrefixBoolValueSuffix): unknown {
    const obj: any = {};
    if (message.value !== false) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrefixBoolValueSuffix>, I>>(base?: I): PrefixBoolValueSuffix {
    return PrefixBoolValueSuffix.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrefixBoolValueSuffix>, I>>(object: I): PrefixBoolValueSuffix {
    const message = createBasePrefixBoolValueSuffix();
    message.value = object.value ?? false;
    return message;
  },
};

function createBasePrefixStringValueSuffix(): PrefixStringValueSuffix {
  return { value: "" };
}

export const PrefixStringValueSuffix: MessageFns<PrefixStringValueSuffix> = {
  encode(message: PrefixStringValueSuffix, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrefixStringValueSuffix {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrefixStringValueSuffix();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrefixStringValueSuffix {
    return { value: isSet(object.value) ? globalThis.String(object.value) : "" };
  },

  toJSON(message: PrefixStringValueSuffix): unknown {
    const obj: any = {};
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrefixStringValueSuffix>, I>>(base?: I): PrefixStringValueSuffix {
    return PrefixStringValueSuffix.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrefixStringValueSuffix>, I>>(object: I): PrefixStringValueSuffix {
    const message = createBasePrefixStringValueSuffix();
    message.value = object.value ?? "";
    return message;
  },
};

function createBasePrefixBytesValueSuffix(): PrefixBytesValueSuffix {
  return { value: new Uint8Array(0) };
}

export const PrefixBytesValueSuffix: MessageFns<PrefixBytesValueSuffix> = {
  encode(message: PrefixBytesValueSuffix, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value.length !== 0) {
      writer.uint32(10).bytes(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrefixBytesValueSuffix {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrefixBytesValueSuffix();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.value = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrefixBytesValueSuffix {
    return { value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0) };
  },

  toJSON(message: PrefixBytesValueSuffix): unknown {
    const obj: any = {};
    if (message.value.length !== 0) {
      obj.value = base64FromBytes(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrefixBytesValueSuffix>, I>>(base?: I): PrefixBytesValueSuffix {
    return PrefixBytesValueSuffix.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrefixBytesValueSuffix>, I>>(object: I): PrefixBytesValueSuffix {
    const message = createBasePrefixBytesValueSuffix();
    message.value = object.value ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
