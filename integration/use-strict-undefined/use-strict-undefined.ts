// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// source: use-strict-undefined.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "";

export interface UseStrictUndefined {
  inner: UseStrictUndefined_Inner;
  value: { $case: "a"; a: UseStrictUndefined_A } | { $case: "b"; b: UseStrictUndefined_B };
}

export interface UseStrictUndefined_Inner {
}

export interface UseStrictUndefined_A {
}

export interface UseStrictUndefined_B {
}

function createBaseUseStrictUndefined(): UseStrictUndefined {
  return { inner: undefined, value: undefined } as unknown as UseStrictUndefined;
}

export const UseStrictUndefined = {
  encode(message: UseStrictUndefined, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.inner !== undefined) {
      UseStrictUndefined_Inner.encode(message.inner, writer.uint32(10).fork()).ldelim();
    }
    switch (message.value?.$case) {
      case "a":
        UseStrictUndefined_A.encode(message.value.a, writer.uint32(18).fork()).ldelim();
        break;
      case "b":
        UseStrictUndefined_B.encode(message.value.b, writer.uint32(26).fork()).ldelim();
        break;
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UseStrictUndefined {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUseStrictUndefined();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.inner = UseStrictUndefined_Inner.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = { $case: "a", a: UseStrictUndefined_A.decode(reader, reader.uint32()) };
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.value = { $case: "b", b: UseStrictUndefined_B.decode(reader, reader.uint32()) };
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeepPartial<UseStrictUndefined> {
    return {
      inner: isSet(object.inner) ? UseStrictUndefined_Inner.fromJSON(object.inner) : undefined,
      value: isSet(object.a)
        ? { $case: "a", a: UseStrictUndefined_A.fromJSON(object.a) }
        : isSet(object.b)
        ? { $case: "b", b: UseStrictUndefined_B.fromJSON(object.b) }
        : undefined,
    };
  },

  toJSON(message: UseStrictUndefined): unknown {
    const obj: any = {};
    if (message.inner !== undefined) {
      obj.inner = UseStrictUndefined_Inner.toJSON(message.inner);
    }
    if (message.value?.$case === "a") {
      obj.a = UseStrictUndefined_A.toJSON(message.value.a);
    }
    if (message.value?.$case === "b") {
      obj.b = UseStrictUndefined_B.toJSON(message.value.b);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UseStrictUndefined>, I>>(base?: I): DeepPartial<UseStrictUndefined> {
    return UseStrictUndefined.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UseStrictUndefined>, I>>(object: I): DeepPartial<UseStrictUndefined> {
    const message = createBaseUseStrictUndefined();
    if (object.inner !== undefined && object.inner !== null) {
      message.inner = UseStrictUndefined_Inner.fromPartial(object.inner);
    }
    if (object.value?.$case === "a" && object.value?.a !== undefined && object.value?.a !== null) {
      message.value = { $case: "a", a: UseStrictUndefined_A.fromPartial(object.value.a) };
    }
    if (object.value?.$case === "b" && object.value?.b !== undefined && object.value?.b !== null) {
      message.value = { $case: "b", b: UseStrictUndefined_B.fromPartial(object.value.b) };
    }
    return message;
  },
};

function createBaseUseStrictUndefined_Inner(): UseStrictUndefined_Inner {
  return {} as unknown as UseStrictUndefined_Inner;
}

export const UseStrictUndefined_Inner = {
  encode(_: UseStrictUndefined_Inner, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UseStrictUndefined_Inner {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUseStrictUndefined_Inner();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeepPartial<UseStrictUndefined_Inner> {
    return {};
  },

  toJSON(_: UseStrictUndefined_Inner): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<UseStrictUndefined_Inner>, I>>(base?: I): DeepPartial<UseStrictUndefined_Inner> {
    return UseStrictUndefined_Inner.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UseStrictUndefined_Inner>, I>>(_: I): DeepPartial<UseStrictUndefined_Inner> {
    const message = createBaseUseStrictUndefined_Inner();
    return message;
  },
};

function createBaseUseStrictUndefined_A(): UseStrictUndefined_A {
  return {} as unknown as UseStrictUndefined_A;
}

export const UseStrictUndefined_A = {
  encode(_: UseStrictUndefined_A, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UseStrictUndefined_A {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUseStrictUndefined_A();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeepPartial<UseStrictUndefined_A> {
    return {};
  },

  toJSON(_: UseStrictUndefined_A): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<UseStrictUndefined_A>, I>>(base?: I): DeepPartial<UseStrictUndefined_A> {
    return UseStrictUndefined_A.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UseStrictUndefined_A>, I>>(_: I): DeepPartial<UseStrictUndefined_A> {
    const message = createBaseUseStrictUndefined_A();
    return message;
  },
};

function createBaseUseStrictUndefined_B(): UseStrictUndefined_B {
  return {} as unknown as UseStrictUndefined_B;
}

export const UseStrictUndefined_B = {
  encode(_: UseStrictUndefined_B, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UseStrictUndefined_B {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUseStrictUndefined_B();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeepPartial<UseStrictUndefined_B> {
    return {};
  },

  toJSON(_: UseStrictUndefined_B): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<UseStrictUndefined_B>, I>>(base?: I): DeepPartial<UseStrictUndefined_B> {
    return UseStrictUndefined_B.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UseStrictUndefined_B>, I>>(_: I): DeepPartial<UseStrictUndefined_B> {
    const message = createBaseUseStrictUndefined_B();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
